{"version":3,"sources":["components/CircleSelector/CircleSelector.jsx","components/Circles/Circle.jsx","App.js","serviceWorker.js","index.js"],"names":["CircleSelector","props","handleChange","evt","handleSelectedCircle","target","value","selectedCircle","className","onClick","selected","Circles","App","circle","setState","state","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2TA+BeA,G,YA5BQ,SAAAC,GAEnB,IAAMC,EAAe,SAAAC,GACjBF,EAAMG,qBAAqBD,EAAIE,OAAOC,QAG9C,GAAIL,EAAMM,eAEN,OACI,yBAAKC,UAAU,kBACX,4BAAQA,UAAoC,gBAAzBP,EAAMM,eAAmC,iBAAmB,GAAID,MAAM,cAAcG,QAASP,GAClF,gBAAzBD,EAAMM,eAAmC,oBAAsB,mBAEpE,4BAAQC,UAAoC,iBAAzBP,EAAMM,eAAoC,iBAAmB,GAAID,MAAM,eAAeG,QAASP,GAC1F,iBAAnBD,EAAMS,SAA8B,oBAAsB,mBAE/D,4BAAQF,UAAoC,gBAAzBP,EAAMM,eAAmC,iBAAmB,GAAID,MAAM,cAAcG,QAASP,GACxF,gBAAnBD,EAAMS,SAA6B,oBAAsB,mBAE9D,4BAAQF,UAAoC,iBAAzBP,EAAMM,eAAoC,iBAAmB,GAAID,MAAM,eAAeG,QAASP,GACpF,iBAAzBD,EAAMM,eAAoC,oBAAsB,sBCDlEI,G,MAnBC,SAAAV,GACZ,OACI,yBAAKO,UAAU,WACX,yBAAKA,UAAoC,gBAAzBP,EAAMM,eAAmC,iBAAmB,MAA5E,KAGA,yBAAKC,UAAoC,iBAAzBP,EAAMM,eAAoC,iBAAmB,MAA7E,KAGA,yBAAKC,UAAoC,gBAAzBP,EAAMM,eAAmC,iBAAmB,MAA5E,KAGA,yBAAKC,UAAoC,iBAAzBP,EAAMM,eAAoC,iBAAmB,MAA7E,QCsBGK,E,kDA/Bb,aAAe,IAAD,8BACZ,gBAOFR,qBAAuB,SAACS,GACtB,EAAKC,SAAS,CAACP,eAAgBM,KAP/B,EAAKE,MAAQ,CACXR,eAAgB,eAHN,E,qDAcV,OACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAAlB,2BACA,8BACA,kBAAC,EAAD,CACED,eAAgBS,KAAKD,MAAMR,eAC3BH,qBAAsBY,KAAKZ,uBAE7B,kBAAC,EAAD,CACEG,eAAgBS,KAAKD,MAAMR,uB,GAxBrBU,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.b56665ed.chunk.js","sourcesContent":["import React from 'react'\nimport './CircleSelector.css'\n\nconst CircleSelector = props => {\n    \n    const handleChange = evt => {\n        props.handleSelectedCircle(evt.target.value)\n      }\n\nif (props.selectedCircle) {\n\n    return(\n        <div className='CircleSelector' >\n            <button className={props.selectedCircle === 'firstCircle' ? 'selectedCircle' : ''} value='firstCircle' onClick={handleChange}>\n                {props.selectedCircle === 'firstCircle' ? 'circle 1 selected' : 'select circle 1' }\n            </button>\n            <button className={props.selectedCircle === 'secondCircle' ? 'selectedCircle' : ''} value='secondCircle' onClick={handleChange}>\n                {props.selected === 'secondCircle' ? 'circle 2 selected' : 'select circle 2' }\n            </button>\n            <button className={props.selectedCircle === 'thridCircle' ? 'selectedCircle' : ''} value='thridCircle' onClick={handleChange}>\n                {props.selected === 'thridCircle' ? 'circle 3 selected' : 'select circle 3' }\n            </button>\n            <button className={props.selectedCircle === 'fourthCircle' ? 'selectedCircle' : ''} value='fourthCircle' onClick={handleChange}>\n                {props.selectedCircle === 'fourthCircle' ? 'circle 4 selected' : 'select circle 4' }\n            </button>\n        </div>\n        )\n    }\n}\n\n\nexport default CircleSelector","import React from 'react';\nimport './Circle.css';\n\nconst Circles = props => {\n    return(\n        <div className=\"Circles\">\n            <div className={props.selectedCircle === 'firstCircle' ? 'selectedCircle' : null}>\n                1\n            </div>\n            <div className={props.selectedCircle === 'secondCircle' ? 'selectedCircle' : null}>\n                2\n            </div>\n            <div className={props.selectedCircle === 'thridCircle' ? 'selectedCircle' : null}>\n                3\n            </div>\n            <div className={props.selectedCircle === 'fourthCircle' ? 'selectedCircle' : null}>\n                4\n            </div>\n        </div>\n    );\n}\n\nexport default Circles;","import React, { Component } from 'react';\nimport './App.css';\nimport CircleSelector from './components/CircleSelector/CircleSelector';\nimport Circle from './components/Circles/Circle'\n\nclass App extends Component {\n  constructor() {\n    super()\n    this.state = {\n      selectedCircle: 'firstCircle'\n    }\n  }\n\n\n  handleSelectedCircle = (circle) => {\n    this.setState({selectedCircle: circle})\n  }\n\n\n    render() {\n      return (\n        <div className=\"App\">\n          <header className=\"App-header\">UNIT 4 FINAL ASSESSMENT</header>\n          <main>\n          <CircleSelector\n            selectedCircle={this.state.selectedCircle}\n            handleSelectedCircle={this.handleSelectedCircle}\n          />\n          <Circle\n            selectedCircle={this.state.selectedCircle}\n          />\n          </main>\n        </div>\n      );\n    }\n  }\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}